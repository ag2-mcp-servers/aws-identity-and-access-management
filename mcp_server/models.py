# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T11:54:46+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import Any as Any_aliased
from typing import Dict, List, Optional

from pydantic import BaseModel, ConfigDict, Field, RootModel, SecretStr, conint, constr


class AccessAdvisorUsageGranularityType(Enum):
    SERVICE_LEVEL = 'SERVICE_LEVEL'
    ACTION_LEVEL = 'ACTION_LEVEL'


class ActionNameType(RootModel[constr(min_length=3, max_length=128)]):
    root: constr(min_length=3, max_length=128)


class BootstrapDatum(RootModel[SecretStr]):
    root: SecretStr


class ColumnNumber(RootModel[int]):
    root: int


class ConcurrentModificationException(RootModel[Any_aliased]):
    root: Any_aliased


class ContextKeyNameType(RootModel[constr(min_length=5, max_length=256)]):
    root: constr(min_length=5, max_length=256)


class ContextKeyNamesResultListType(RootModel[List[ContextKeyNameType]]):
    root: List[ContextKeyNameType]


class ContextKeyTypeEnum(Enum):
    string = 'string'
    stringList = 'stringList'
    numeric = 'numeric'
    numericList = 'numericList'
    boolean = 'boolean'
    booleanList = 'booleanList'
    ip = 'ip'
    ipList = 'ipList'
    binary = 'binary'
    binaryList = 'binaryList'
    date = 'date'
    dateList = 'dateList'


class ContextKeyValueType(RootModel[str]):
    root: str


class CredentialReportExpiredException(RootModel[Any_aliased]):
    root: Any_aliased


class CredentialReportNotPresentException(RootModel[Any_aliased]):
    root: Any_aliased


class CredentialReportNotReadyException(RootModel[Any_aliased]):
    root: Any_aliased


class DeleteConflictException(RootModel[Any_aliased]):
    root: Any_aliased


class DeletionTaskIdType(RootModel[constr(min_length=1, max_length=1000)]):
    root: constr(min_length=1, max_length=1000)


class DeletionTaskStatusType(Enum):
    SUCCEEDED = 'SUCCEEDED'
    IN_PROGRESS = 'IN_PROGRESS'
    FAILED = 'FAILED'
    NOT_STARTED = 'NOT_STARTED'


class DuplicateCertificateException(RootModel[Any_aliased]):
    root: Any_aliased


class DuplicateSSHPublicKeyException(RootModel[Any_aliased]):
    root: Any_aliased


class EntityAlreadyExistsException(RootModel[Any_aliased]):
    root: Any_aliased


class EntityTemporarilyUnmodifiableException(RootModel[Any_aliased]):
    root: Any_aliased


class EntityType(Enum):
    User = 'User'
    Role = 'Role'
    Group = 'Group'
    LocalManagedPolicy = 'LocalManagedPolicy'
    AWSManagedPolicy = 'AWSManagedPolicy'


class EvalDecisionSourceType(RootModel[constr(min_length=3, max_length=256)]):
    root: constr(min_length=3, max_length=256)


class GetContextKeysForPolicyResponse(BaseModel):
    ContextKeyNames: Optional[ContextKeyNamesResultListType] = None


class GetServiceLinkedRoleDeletionStatusRequest(BaseModel):
    DeletionTaskId: DeletionTaskIdType


class InvalidAuthenticationCodeException(RootModel[Any_aliased]):
    root: Any_aliased


class InvalidCertificateException(RootModel[Any_aliased]):
    root: Any_aliased


class InvalidInputException(RootModel[Any_aliased]):
    root: Any_aliased


class InvalidPublicKeyException(RootModel[Any_aliased]):
    root: Any_aliased


class InvalidUserTypeException(RootModel[Any_aliased]):
    root: Any_aliased


class KeyPairMismatchException(RootModel[Any_aliased]):
    root: Any_aliased


class LimitExceededException(RootModel[Any_aliased]):
    root: Any_aliased


class LineNumber(RootModel[int]):
    root: int


class ListOpenIDConnectProvidersRequest(BaseModel):
    pass


class ListSAMLProvidersRequest(BaseModel):
    pass


class MalformedCertificateException(RootModel[Any_aliased]):
    root: Any_aliased


class MalformedPolicyDocumentException(RootModel[Any_aliased]):
    root: Any_aliased


class NoSuchEntityException(RootModel[Any_aliased]):
    root: Any_aliased


class OpenIDConnectProviderUrlType(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255) = Field(
        ...,
        description='Contains a URL that specifies the endpoint for an OpenID Connect provider.',
    )


class PasswordPolicyViolationException(RootModel[Any_aliased]):
    root: Any_aliased


class PermissionsBoundaryAttachmentType(Enum):
    PermissionsBoundaryPolicy = 'PermissionsBoundaryPolicy'


class PolicyEvaluationDecisionType(Enum):
    allowed = 'allowed'
    explicitDeny = 'explicitDeny'
    implicitDeny = 'implicitDeny'


class PolicyEvaluationException(RootModel[Any_aliased]):
    root: Any_aliased


class PolicyIdentifierType(RootModel[str]):
    root: str


class PolicyNotAttachableException(RootModel[Any_aliased]):
    root: Any_aliased


class PolicySourceType(Enum):
    user = 'user'
    group = 'group'
    role = 'role'
    aws_managed = 'aws-managed'
    user_managed = 'user-managed'
    resource = 'resource'
    none = 'none'


class PolicyUsageType(Enum):
    PermissionsPolicy = 'PermissionsPolicy'
    PermissionsBoundary = 'PermissionsBoundary'


class Position(BaseModel):
    Column: Optional[ColumnNumber] = None
    Line: Optional[LineNumber] = None


class ReasonType(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class RegionNameType(RootModel[constr(min_length=1, max_length=100)]):
    root: constr(min_length=1, max_length=100)


class ReportContentType(RootModel[str]):
    root: str


class ReportFormatType(Enum):
    text_csv = 'text/csv'


class ReportGenerationLimitExceededException(RootModel[Any_aliased]):
    root: Any_aliased


class ReportStateDescriptionType(RootModel[str]):
    root: str


class ReportStateType(Enum):
    STARTED = 'STARTED'
    INPROGRESS = 'INPROGRESS'
    COMPLETE = 'COMPLETE'


class ResourceHandlingOptionType(RootModel[constr(min_length=1, max_length=64)]):
    root: constr(min_length=1, max_length=64)


class ResourceNameType(RootModel[constr(min_length=1, max_length=2048)]):
    root: constr(min_length=1, max_length=2048)


class SAMLMetadataDocumentType(RootModel[constr(min_length=1000, max_length=10000000)]):
    root: constr(min_length=1000, max_length=10000000)


class SAMLProviderNameType(
    RootModel[constr(pattern=r'[\w._-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w._-]+', min_length=1, max_length=128)


class ServiceFailureException(RootModel[Any_aliased]):
    root: Any_aliased


class ServiceNotSupportedException(RootModel[Any_aliased]):
    root: Any_aliased


class Statement(BaseModel):
    EndPosition: Optional[Position] = None
    SourcePolicyId: Optional[PolicyIdentifierType] = None
    SourcePolicyType: Optional[PolicySourceType] = None
    StartPosition: Optional[Position] = None


class StatementListType(RootModel[List[Statement]]):
    root: List[Statement]


class UnmodifiableEntityException(RootModel[Any_aliased]):
    root: Any_aliased


class UnrecognizedPublicKeyEncodingException(RootModel[Any_aliased]):
    root: Any_aliased


class UpdateRoleResponse(BaseModel):
    pass


class AccessKeyIdType(
    RootModel[constr(pattern=r'[\w]+', min_length=16, max_length=128)]
):
    root: constr(pattern=r'[\w]+', min_length=16, max_length=128)


class AccessKeySecretType(RootModel[SecretStr]):
    root: SecretStr


class AccountAliasType(
    RootModel[
        constr(
            pattern=r'^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$',
            min_length=3,
            max_length=63,
        )
    ]
):
    model_config = ConfigDict(
        regex_engine="python-re",
    )
    root: constr(
        pattern=r'^[a-z0-9](([a-z0-9]|-(?!-))*[a-z0-9])?$', min_length=3, max_length=63
    )


class ArnType(RootModel[constr(min_length=20, max_length=2048)]):
    root: constr(min_length=20, max_length=2048) = Field(
        ...,
        description='<p>The Amazon Resource Name (ARN). ARNs are unique identifiers for Amazon Web Services resources.</p> <p>For more information about ARNs, go to <a href="https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html">Amazon Resource Names (ARNs)</a> in the <i>Amazon Web Services General Reference</i>. </p>',
    )


class AssignmentStatusType(Enum):
    Assigned = 'Assigned'
    Unassigned = 'Unassigned'
    Any = 'Any'


class AttachmentCountType(RootModel[int]):
    root: int


class AuthenticationCodeType(
    RootModel[constr(pattern=r'[\d]+', min_length=6, max_length=6)]
):
    root: constr(pattern=r'[\d]+', min_length=6, max_length=6)


class BooleanObjectType(RootModel[bool]):
    root: bool


class BooleanType(RootModel[bool]):
    root: bool


class CertificateBodyType(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+',
            min_length=1,
            max_length=16384,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=16384
    )


class CertificateChainType(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+',
            min_length=1,
            max_length=2097152,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=2097152
    )


class CertificateIdType(
    RootModel[constr(pattern=r'[\w]+', min_length=24, max_length=128)]
):
    root: constr(pattern=r'[\w]+', min_length=24, max_length=128)


class ClientIDType(RootModel[constr(min_length=1, max_length=255)]):
    root: constr(min_length=1, max_length=255)


class CustomSuffixType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=64)


class DateType(RootModel[datetime]):
    root: datetime


class EncodingType(Enum):
    SSH = 'SSH'
    PEM = 'PEM'


class EntityListType(RootModel[List[EntityType]]):
    root: List[EntityType]


class EntityNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)


class ExistingUserNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)


class GlobalEndpointTokenVersion(Enum):
    v1Token = 'v1Token'
    v2Token = 'v2Token'


class GroupNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)


class IdType(RootModel[constr(pattern=r'[\w]+', min_length=16, max_length=128)]):
    root: constr(pattern=r'[\w]+', min_length=16, max_length=128)


class InstanceProfileNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)


class IntegerType(RootModel[int]):
    root: int


class JobIDType(RootModel[constr(min_length=36, max_length=36)]):
    root: constr(min_length=36, max_length=36)


class JobStatusType(Enum):
    IN_PROGRESS = 'IN_PROGRESS'
    COMPLETED = 'COMPLETED'
    FAILED = 'FAILED'


class MarkerType(
    RootModel[constr(pattern=r'[\u0020-\u00FF]+', min_length=1, max_length=320)]
):
    root: constr(pattern=r'[\u0020-\u00FF]+', min_length=1, max_length=320)


class MaxItemsType(RootModel[conint(ge=1, le=1000)]):
    root: conint(ge=1, le=1000)


class MaxPasswordAgeType(RootModel[conint(ge=1, le=1095)]):
    root: conint(ge=1, le=1095)


class MinimumPasswordLengthType(RootModel[conint(ge=6, le=128)]):
    root: conint(ge=6, le=128)


class OrganizationsEntityPathType(
    RootModel[
        constr(
            pattern=r'^o-[0-9a-z]{10,32}\/r-[0-9a-z]{4,32}[0-9a-z-\/]*',
            min_length=19,
            max_length=427,
        )
    ]
):
    root: constr(
        pattern=r'^o-[0-9a-z]{10,32}\/r-[0-9a-z]{4,32}[0-9a-z-\/]*',
        min_length=19,
        max_length=427,
    )


class OrganizationsPolicyIdType(RootModel[constr(pattern=r'^p-[0-9a-zA-Z_]{8,128}$')]):
    root: constr(pattern=r'^p-[0-9a-zA-Z_]{8,128}$')


class PasswordReusePreventionType(RootModel[conint(ge=1, le=24)]):
    root: conint(ge=1, le=24)


class PasswordType(RootModel[SecretStr]):
    root: SecretStr


class PathPrefixType(
    RootModel[constr(pattern=r'\u002F[\u0021-\u007F]*', min_length=1, max_length=512)]
):
    root: constr(pattern=r'\u002F[\u0021-\u007F]*', min_length=1, max_length=512)


class PathType(
    RootModel[
        constr(
            pattern=r'(\u002F)|(\u002F[\u0021-\u007F]+\u002F)',
            min_length=1,
            max_length=512,
        )
    ]
):
    root: constr(
        pattern=r'(\u002F)|(\u002F[\u0021-\u007F]+\u002F)', min_length=1, max_length=512
    )


class PolicyDescriptionType(RootModel[constr(max_length=1000)]):
    root: constr(max_length=1000)


class PolicyDocumentType(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+',
            min_length=1,
            max_length=131072,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=131072
    )


class PolicyNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)


class PolicyOwnerEntityType(Enum):
    USER = 'USER'
    ROLE = 'ROLE'
    GROUP = 'GROUP'


class PolicyPathType(
    RootModel[
        constr(pattern=r'((/[A-Za-z0-9\.,\+@=_-]+)*)/', min_length=1, max_length=512)
    ]
):
    root: constr(pattern=r'((/[A-Za-z0-9\.,\+@=_-]+)*)/', min_length=1, max_length=512)


class PolicyScopeType(Enum):
    All = 'All'
    AWS = 'AWS'
    Local = 'Local'


class PolicyType(Enum):
    INLINE = 'INLINE'
    MANAGED = 'MANAGED'


class PolicyVersionIdType(RootModel[constr(pattern=r'v[1-9][0-9]*(\.[A-Za-z0-9-]*)?')]):
    root: constr(pattern=r'v[1-9][0-9]*(\.[A-Za-z0-9-]*)?')


class PrivateKeyType(RootModel[SecretStr]):
    root: SecretStr


class PublicKeyFingerprintType(
    RootModel[constr(pattern=r'[:\w]+', min_length=48, max_length=48)]
):
    root: constr(pattern=r'[:\w]+', min_length=48, max_length=48)


class PublicKeyIdType(
    RootModel[constr(pattern=r'[\w]+', min_length=20, max_length=128)]
):
    root: constr(pattern=r'[\w]+', min_length=20, max_length=128)


class PublicKeyMaterialType(
    RootModel[
        constr(
            pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+',
            min_length=1,
            max_length=16384,
        )
    ]
):
    root: constr(
        pattern=r'[\u0009\u000A\u000D\u0020-\u00FF]+', min_length=1, max_length=16384
    )


class ResponseMarkerType(RootModel[str]):
    root: str


class RoleDescriptionType(
    RootModel[constr(pattern=r'[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*', max_length=1000)]
):
    root: constr(pattern=r'[\p{L}\p{M}\p{Z}\p{S}\p{N}\p{P}]*', max_length=1000)


class RoleMaxSessionDurationType(RootModel[conint(ge=3600, le=43200)]):
    root: conint(ge=3600, le=43200)


class RoleNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=64)


class SerialNumberType(
    RootModel[constr(pattern=r'[\w+=/:,.@-]+', min_length=9, max_length=256)]
):
    root: constr(pattern=r'[\w+=/:,.@-]+', min_length=9, max_length=256)


class ServerCertificateNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=128)


class ServiceName(RootModel[str]):
    root: str


class ServiceNameType(RootModel[str]):
    root: str


class ServiceNamespaceType(
    RootModel[constr(pattern=r'[\w-]*', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\w-]*', min_length=1, max_length=64)


class ServicePassword(RootModel[SecretStr]):
    root: SecretStr


class ServiceSpecificCredentialId(
    RootModel[constr(pattern=r'[\w]+', min_length=20, max_length=128)]
):
    root: constr(pattern=r'[\w]+', min_length=20, max_length=128)


class ServiceUserName(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=17, max_length=200)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=17, max_length=200)


class SortKeyType(Enum):
    SERVICE_NAMESPACE_ASCENDING = 'SERVICE_NAMESPACE_ASCENDING'
    SERVICE_NAMESPACE_DESCENDING = 'SERVICE_NAMESPACE_DESCENDING'
    LAST_AUTHENTICATED_TIME_ASCENDING = 'LAST_AUTHENTICATED_TIME_ASCENDING'
    LAST_AUTHENTICATED_TIME_DESCENDING = 'LAST_AUTHENTICATED_TIME_DESCENDING'


class StatusType(Enum):
    Active = 'Active'
    Inactive = 'Inactive'


class StringType(RootModel[str]):
    root: str


class SummaryKeyType(Enum):
    Users = 'Users'
    UsersQuota = 'UsersQuota'
    Groups = 'Groups'
    GroupsQuota = 'GroupsQuota'
    ServerCertificates = 'ServerCertificates'
    ServerCertificatesQuota = 'ServerCertificatesQuota'
    UserPolicySizeQuota = 'UserPolicySizeQuota'
    GroupPolicySizeQuota = 'GroupPolicySizeQuota'
    GroupsPerUserQuota = 'GroupsPerUserQuota'
    SigningCertificatesPerUserQuota = 'SigningCertificatesPerUserQuota'
    AccessKeysPerUserQuota = 'AccessKeysPerUserQuota'
    MFADevices = 'MFADevices'
    MFADevicesInUse = 'MFADevicesInUse'
    AccountMFAEnabled = 'AccountMFAEnabled'
    AccountAccessKeysPresent = 'AccountAccessKeysPresent'
    AccountSigningCertificatesPresent = 'AccountSigningCertificatesPresent'
    AttachedPoliciesPerGroupQuota = 'AttachedPoliciesPerGroupQuota'
    AttachedPoliciesPerRoleQuota = 'AttachedPoliciesPerRoleQuota'
    AttachedPoliciesPerUserQuota = 'AttachedPoliciesPerUserQuota'
    Policies = 'Policies'
    PoliciesQuota = 'PoliciesQuota'
    PolicySizeQuota = 'PolicySizeQuota'
    PolicyVersionsInUse = 'PolicyVersionsInUse'
    PolicyVersionsInUseQuota = 'PolicyVersionsInUseQuota'
    VersionsPerPolicyQuota = 'VersionsPerPolicyQuota'
    GlobalEndpointTokenVersion = 'GlobalEndpointTokenVersion'


class SummaryValueType(RootModel[int]):
    root: int


class TagKeyType(
    RootModel[
        constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]+', min_length=1, max_length=128)
    ]
):
    root: constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]+', min_length=1, max_length=128)


class TagValueType(
    RootModel[
        constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]*', min_length=0, max_length=256)
    ]
):
    root: constr(pattern=r'[\p{L}\p{Z}\p{N}_.:/=+\-@]*', min_length=0, max_length=256)


class ThumbprintType(RootModel[constr(min_length=40, max_length=40)]):
    root: constr(min_length=40, max_length=40) = Field(
        ...,
        description="<p>Contains a thumbprint for an identity provider's server certificate.</p> <p>The identity provider's server certificate thumbprint is the hex-encoded SHA-1 hash value of the self-signed X.509 certificate. This thumbprint is used by the domain where the OpenID Connect provider makes its keys available. The thumbprint is always a 40-character string.</p>",
    )


class UserNameType(
    RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=64)]
):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1, max_length=64)


class VirtualMFADeviceName(RootModel[constr(pattern=r'[\w+=,.@-]+', min_length=1)]):
    root: constr(pattern=r'[\w+=,.@-]+', min_length=1)


class Action(Enum):
    AddClientIDToOpenIDConnectProvider = 'AddClientIDToOpenIDConnectProvider'


class Version(Enum):
    field_2010_05_08 = '2010-05-08'


class Action4(Enum):
    AddRoleToInstanceProfile = 'AddRoleToInstanceProfile'


class Action8(Enum):
    AddUserToGroup = 'AddUserToGroup'


class Action12(Enum):
    AttachGroupPolicy = 'AttachGroupPolicy'


class Action16(Enum):
    AttachRolePolicy = 'AttachRolePolicy'


class Action20(Enum):
    AttachUserPolicy = 'AttachUserPolicy'


class Action24(Enum):
    ChangePassword = 'ChangePassword'


class Action28(Enum):
    CreateAccessKey = 'CreateAccessKey'


class Action32(Enum):
    CreateAccountAlias = 'CreateAccountAlias'


class Action36(Enum):
    CreateGroup = 'CreateGroup'


class Action40(Enum):
    CreateInstanceProfile = 'CreateInstanceProfile'


class Action44(Enum):
    CreateLoginProfile = 'CreateLoginProfile'


class Action48(Enum):
    CreateOpenIDConnectProvider = 'CreateOpenIDConnectProvider'


class ClientIDList(RootModel[List[ClientIDType]]):
    root: List[ClientIDType]


class ThumbprintList(RootModel[List[ThumbprintType]]):
    root: List[ThumbprintType] = Field(
        ...,
        description='Contains a list of thumbprints of identity provider server certificates.',
    )


class Action52(Enum):
    CreatePolicy = 'CreatePolicy'


class Action56(Enum):
    CreatePolicyVersion = 'CreatePolicyVersion'


class Action60(Enum):
    CreateRole = 'CreateRole'


class Action64(Enum):
    CreateSAMLProvider = 'CreateSAMLProvider'


class Action68(Enum):
    CreateServiceLinkedRole = 'CreateServiceLinkedRole'


class Action72(Enum):
    CreateServiceSpecificCredential = 'CreateServiceSpecificCredential'


class Action76(Enum):
    CreateUser = 'CreateUser'


class Action80(Enum):
    CreateVirtualMFADevice = 'CreateVirtualMFADevice'


class Action84(Enum):
    DeactivateMFADevice = 'DeactivateMFADevice'


class Action88(Enum):
    DeleteAccessKey = 'DeleteAccessKey'


class Action92(Enum):
    DeleteAccountAlias = 'DeleteAccountAlias'


class Action96(Enum):
    DeleteAccountPasswordPolicy = 'DeleteAccountPasswordPolicy'


class Action100(Enum):
    DeleteGroup = 'DeleteGroup'


class Action104(Enum):
    DeleteGroupPolicy = 'DeleteGroupPolicy'


class Action108(Enum):
    DeleteInstanceProfile = 'DeleteInstanceProfile'


class Action112(Enum):
    DeleteLoginProfile = 'DeleteLoginProfile'


class Action116(Enum):
    DeleteOpenIDConnectProvider = 'DeleteOpenIDConnectProvider'


class Action120(Enum):
    DeletePolicy = 'DeletePolicy'


class Action124(Enum):
    DeletePolicyVersion = 'DeletePolicyVersion'


class Action128(Enum):
    DeleteRole = 'DeleteRole'


class Action132(Enum):
    DeleteRolePermissionsBoundary = 'DeleteRolePermissionsBoundary'


class Action136(Enum):
    DeleteRolePolicy = 'DeleteRolePolicy'


class Action140(Enum):
    DeleteSAMLProvider = 'DeleteSAMLProvider'


class Action144(Enum):
    DeleteSSHPublicKey = 'DeleteSSHPublicKey'


class Action148(Enum):
    DeleteServerCertificate = 'DeleteServerCertificate'


class Action152(Enum):
    DeleteServiceLinkedRole = 'DeleteServiceLinkedRole'


class Action156(Enum):
    DeleteServiceSpecificCredential = 'DeleteServiceSpecificCredential'


class Action160(Enum):
    DeleteSigningCertificate = 'DeleteSigningCertificate'


class Action164(Enum):
    DeleteUser = 'DeleteUser'


class Action168(Enum):
    DeleteUserPermissionsBoundary = 'DeleteUserPermissionsBoundary'


class Action172(Enum):
    DeleteUserPolicy = 'DeleteUserPolicy'


class Action176(Enum):
    DeleteVirtualMFADevice = 'DeleteVirtualMFADevice'


class Action180(Enum):
    DetachGroupPolicy = 'DetachGroupPolicy'


class Action184(Enum):
    DetachRolePolicy = 'DetachRolePolicy'


class Action188(Enum):
    DetachUserPolicy = 'DetachUserPolicy'


class Action192(Enum):
    EnableMFADevice = 'EnableMFADevice'


class Action196(Enum):
    GenerateCredentialReport = 'GenerateCredentialReport'


class Action200(Enum):
    GenerateOrganizationsAccessReport = 'GenerateOrganizationsAccessReport'


class Granularity(Enum):
    SERVICE_LEVEL = 'SERVICE_LEVEL'
    ACTION_LEVEL = 'ACTION_LEVEL'


class Action204(Enum):
    GenerateServiceLastAccessedDetails = 'GenerateServiceLastAccessedDetails'


class Action208(Enum):
    GetAccessKeyLastUsed = 'GetAccessKeyLastUsed'


class Action212(Enum):
    GetAccountAuthorizationDetails = 'GetAccountAuthorizationDetails'


class Filter(RootModel[List[EntityType]]):
    root: List[EntityType]


class Action216(Enum):
    GetAccountPasswordPolicy = 'GetAccountPasswordPolicy'


class Action220(Enum):
    GetAccountSummary = 'GetAccountSummary'


class Action224(Enum):
    GetContextKeysForCustomPolicy = 'GetContextKeysForCustomPolicy'


class PolicyInputList(RootModel[List[PolicyDocumentType]]):
    root: List[PolicyDocumentType]


class Action228(Enum):
    GetContextKeysForPrincipalPolicy = 'GetContextKeysForPrincipalPolicy'


class Action232(Enum):
    GetCredentialReport = 'GetCredentialReport'


class Action236(Enum):
    GetGroup = 'GetGroup'


class Action240(Enum):
    GetGroupPolicy = 'GetGroupPolicy'


class Action244(Enum):
    GetInstanceProfile = 'GetInstanceProfile'


class Action248(Enum):
    GetLoginProfile = 'GetLoginProfile'


class Action252(Enum):
    GetOpenIDConnectProvider = 'GetOpenIDConnectProvider'


class SortKey(Enum):
    SERVICE_NAMESPACE_ASCENDING = 'SERVICE_NAMESPACE_ASCENDING'
    SERVICE_NAMESPACE_DESCENDING = 'SERVICE_NAMESPACE_DESCENDING'
    LAST_AUTHENTICATED_TIME_ASCENDING = 'LAST_AUTHENTICATED_TIME_ASCENDING'
    LAST_AUTHENTICATED_TIME_DESCENDING = 'LAST_AUTHENTICATED_TIME_DESCENDING'


class Action256(Enum):
    GetOrganizationsAccessReport = 'GetOrganizationsAccessReport'


class Action260(Enum):
    GetPolicy = 'GetPolicy'


class Action264(Enum):
    GetPolicyVersion = 'GetPolicyVersion'


class Action268(Enum):
    GetRole = 'GetRole'


class Action272(Enum):
    GetRolePolicy = 'GetRolePolicy'


class Action276(Enum):
    GetSAMLProvider = 'GetSAMLProvider'


class Encoding(Enum):
    SSH = 'SSH'
    PEM = 'PEM'


class Action280(Enum):
    GetSSHPublicKey = 'GetSSHPublicKey'


class Action284(Enum):
    GetServerCertificate = 'GetServerCertificate'


class Action288(Enum):
    GetServiceLastAccessedDetails = 'GetServiceLastAccessedDetails'


class Action292(Enum):
    GetServiceLastAccessedDetailsWithEntities = (
        'GetServiceLastAccessedDetailsWithEntities'
    )


class Action296(Enum):
    GetServiceLinkedRoleDeletionStatus = 'GetServiceLinkedRoleDeletionStatus'


class Action300(Enum):
    GetUser = 'GetUser'


class Action304(Enum):
    GetUserPolicy = 'GetUserPolicy'


class Action308(Enum):
    ListAccessKeys = 'ListAccessKeys'


class Action312(Enum):
    ListAccountAliases = 'ListAccountAliases'


class Action316(Enum):
    ListAttachedGroupPolicies = 'ListAttachedGroupPolicies'


class Action320(Enum):
    ListAttachedRolePolicies = 'ListAttachedRolePolicies'


class Action324(Enum):
    ListAttachedUserPolicies = 'ListAttachedUserPolicies'


class EntityFilter(Enum):
    User = 'User'
    Role = 'Role'
    Group = 'Group'
    LocalManagedPolicy = 'LocalManagedPolicy'
    AWSManagedPolicy = 'AWSManagedPolicy'


class PolicyUsageFilter(Enum):
    PermissionsPolicy = 'PermissionsPolicy'
    PermissionsBoundary = 'PermissionsBoundary'


class Action328(Enum):
    ListEntitiesForPolicy = 'ListEntitiesForPolicy'


class Action332(Enum):
    ListGroupPolicies = 'ListGroupPolicies'


class Action336(Enum):
    ListGroups = 'ListGroups'


class Action340(Enum):
    ListGroupsForUser = 'ListGroupsForUser'


class Action344(Enum):
    ListInstanceProfileTags = 'ListInstanceProfileTags'


class Action348(Enum):
    ListInstanceProfiles = 'ListInstanceProfiles'


class Action352(Enum):
    ListInstanceProfilesForRole = 'ListInstanceProfilesForRole'


class Action356(Enum):
    ListMFADeviceTags = 'ListMFADeviceTags'


class Action360(Enum):
    ListMFADevices = 'ListMFADevices'


class Action364(Enum):
    ListOpenIDConnectProviderTags = 'ListOpenIDConnectProviderTags'


class Action368(Enum):
    ListOpenIDConnectProviders = 'ListOpenIDConnectProviders'


class Scope(Enum):
    All = 'All'
    AWS = 'AWS'
    Local = 'Local'


class Action372(Enum):
    ListPolicies = 'ListPolicies'


class Action376(Enum):
    ListPoliciesGrantingServiceAccess = 'ListPoliciesGrantingServiceAccess'


class ServiceNamespaces(RootModel[List[ServiceNamespaceType]]):
    root: List[ServiceNamespaceType] = Field(..., max_length=200, min_length=1)


class Action380(Enum):
    ListPolicyTags = 'ListPolicyTags'


class Action384(Enum):
    ListPolicyVersions = 'ListPolicyVersions'


class Action388(Enum):
    ListRolePolicies = 'ListRolePolicies'


class Action392(Enum):
    ListRoleTags = 'ListRoleTags'


class Action396(Enum):
    ListRoles = 'ListRoles'


class Action400(Enum):
    ListSAMLProviderTags = 'ListSAMLProviderTags'


class Action404(Enum):
    ListSAMLProviders = 'ListSAMLProviders'


class Action408(Enum):
    ListSSHPublicKeys = 'ListSSHPublicKeys'


class Action412(Enum):
    ListServerCertificateTags = 'ListServerCertificateTags'


class Action416(Enum):
    ListServerCertificates = 'ListServerCertificates'


class Action420(Enum):
    ListServiceSpecificCredentials = 'ListServiceSpecificCredentials'


class Action424(Enum):
    ListSigningCertificates = 'ListSigningCertificates'


class Action428(Enum):
    ListUserPolicies = 'ListUserPolicies'


class Action432(Enum):
    ListUserTags = 'ListUserTags'


class Action436(Enum):
    ListUsers = 'ListUsers'


class AssignmentStatus(Enum):
    Assigned = 'Assigned'
    Unassigned = 'Unassigned'
    Any = 'Any'


class Action440(Enum):
    ListVirtualMFADevices = 'ListVirtualMFADevices'


class Action444(Enum):
    PutGroupPolicy = 'PutGroupPolicy'


class Action448(Enum):
    PutRolePermissionsBoundary = 'PutRolePermissionsBoundary'


class Action452(Enum):
    PutRolePolicy = 'PutRolePolicy'


class Action456(Enum):
    PutUserPermissionsBoundary = 'PutUserPermissionsBoundary'


class Action460(Enum):
    PutUserPolicy = 'PutUserPolicy'


class Action464(Enum):
    RemoveClientIDFromOpenIDConnectProvider = 'RemoveClientIDFromOpenIDConnectProvider'


class Action468(Enum):
    RemoveRoleFromInstanceProfile = 'RemoveRoleFromInstanceProfile'


class Action472(Enum):
    RemoveUserFromGroup = 'RemoveUserFromGroup'


class Action476(Enum):
    ResetServiceSpecificCredential = 'ResetServiceSpecificCredential'


class Action480(Enum):
    ResyncMFADevice = 'ResyncMFADevice'


class Action484(Enum):
    SetDefaultPolicyVersion = 'SetDefaultPolicyVersion'


class Action488(Enum):
    SetSecurityTokenServicePreferences = 'SetSecurityTokenServicePreferences'


class Action492(Enum):
    SimulateCustomPolicy = 'SimulateCustomPolicy'


class PermissionsBoundaryPolicyInputList(RootModel[List[PolicyDocumentType]]):
    root: List[PolicyDocumentType]


class ActionNames(RootModel[List[ActionNameType]]):
    root: List[ActionNameType]


class ResourceArns(RootModel[List[ResourceNameType]]):
    root: List[ResourceNameType]


class Action496(Enum):
    SimulatePrincipalPolicy = 'SimulatePrincipalPolicy'


class Action500(Enum):
    TagInstanceProfile = 'TagInstanceProfile'


class Action504(Enum):
    TagMFADevice = 'TagMFADevice'


class Action508(Enum):
    TagOpenIDConnectProvider = 'TagOpenIDConnectProvider'


class Action512(Enum):
    TagPolicy = 'TagPolicy'


class Action516(Enum):
    TagRole = 'TagRole'


class Action520(Enum):
    TagSAMLProvider = 'TagSAMLProvider'


class Action524(Enum):
    TagServerCertificate = 'TagServerCertificate'


class Action528(Enum):
    TagUser = 'TagUser'


class Action532(Enum):
    UntagInstanceProfile = 'UntagInstanceProfile'


class TagKeys(RootModel[List[TagKeyType]]):
    root: List[TagKeyType] = Field(..., max_length=50)


class Action536(Enum):
    UntagMFADevice = 'UntagMFADevice'


class Action540(Enum):
    UntagOpenIDConnectProvider = 'UntagOpenIDConnectProvider'


class Action544(Enum):
    UntagPolicy = 'UntagPolicy'


class Action548(Enum):
    UntagRole = 'UntagRole'


class Action552(Enum):
    UntagSAMLProvider = 'UntagSAMLProvider'


class Action556(Enum):
    UntagServerCertificate = 'UntagServerCertificate'


class Action560(Enum):
    UntagUser = 'UntagUser'


class Status(Enum):
    Active = 'Active'
    Inactive = 'Inactive'


class Action564(Enum):
    UpdateAccessKey = 'UpdateAccessKey'


class Action568(Enum):
    UpdateAccountPasswordPolicy = 'UpdateAccountPasswordPolicy'


class Action572(Enum):
    UpdateAssumeRolePolicy = 'UpdateAssumeRolePolicy'


class Action576(Enum):
    UpdateGroup = 'UpdateGroup'


class Action580(Enum):
    UpdateLoginProfile = 'UpdateLoginProfile'


class Action584(Enum):
    UpdateOpenIDConnectProviderThumbprint = 'UpdateOpenIDConnectProviderThumbprint'


class Action588(Enum):
    UpdateRole = 'UpdateRole'


class Action592(Enum):
    UpdateRoleDescription = 'UpdateRoleDescription'


class Action596(Enum):
    UpdateSAMLProvider = 'UpdateSAMLProvider'


class Action600(Enum):
    UpdateSSHPublicKey = 'UpdateSSHPublicKey'


class Action604(Enum):
    UpdateServerCertificate = 'UpdateServerCertificate'


class Action608(Enum):
    UpdateServiceSpecificCredential = 'UpdateServiceSpecificCredential'


class Action612(Enum):
    UpdateSigningCertificate = 'UpdateSigningCertificate'


class Action616(Enum):
    UpdateUser = 'UpdateUser'


class Action620(Enum):
    UploadSSHPublicKey = 'UploadSSHPublicKey'


class Action624(Enum):
    UploadServerCertificate = 'UploadServerCertificate'


class Action628(Enum):
    UploadSigningCertificate = 'UploadSigningCertificate'


class AccessDetail(BaseModel):
    EntityPath: Optional[OrganizationsEntityPathType] = None
    LastAuthenticatedTime: Optional[DateType] = None
    Region: Optional[StringType] = None
    ServiceName: ServiceNameType
    ServiceNamespace: ServiceNamespaceType
    TotalAuthenticatedEntities: Optional[IntegerType] = None


class AccessDetails(RootModel[List[AccessDetail]]):
    root: List[AccessDetail]


class AccessKey(BaseModel):
    AccessKeyId: AccessKeyIdType
    CreateDate: Optional[DateType] = None
    SecretAccessKey: AccessKeySecretType
    Status: StatusType
    UserName: UserNameType


class AccessKeyLastUsed(BaseModel):
    LastUsedDate: DateType
    Region: StringType
    ServiceName: StringType


class AccessKeyMetadata(BaseModel):
    AccessKeyId: Optional[AccessKeyIdType] = None
    CreateDate: Optional[DateType] = None
    Status: Optional[StatusType] = None
    UserName: Optional[UserNameType] = None


class ActionNameListType(RootModel[List[ActionNameType]]):
    root: List[ActionNameType]


class AddClientIDToOpenIDConnectProviderRequest(BaseModel):
    ClientID: ClientIDType
    OpenIDConnectProviderArn: ArnType


class AddRoleToInstanceProfileRequest(BaseModel):
    InstanceProfileName: InstanceProfileNameType
    RoleName: RoleNameType


class AddUserToGroupRequest(BaseModel):
    GroupName: GroupNameType
    UserName: ExistingUserNameType


class ArnListType(RootModel[List[ArnType]]):
    root: List[ArnType]


class AttachGroupPolicyRequest(BaseModel):
    GroupName: GroupNameType
    PolicyArn: ArnType


class AttachRolePolicyRequest(BaseModel):
    PolicyArn: ArnType
    RoleName: RoleNameType


class AttachUserPolicyRequest(BaseModel):
    PolicyArn: ArnType
    UserName: UserNameType


class AttachedPermissionsBoundary(BaseModel):
    PermissionsBoundaryArn: Optional[ArnType] = None
    PermissionsBoundaryType: Optional[PermissionsBoundaryAttachmentType] = None


class AttachedPolicy(BaseModel):
    PolicyArn: Optional[ArnType] = None
    PolicyName: Optional[PolicyNameType] = None


class ChangePasswordRequest(BaseModel):
    NewPassword: PasswordType
    OldPassword: PasswordType


class ContextKeyValueListType(RootModel[List[ContextKeyValueType]]):
    root: List[ContextKeyValueType]


class CreateAccessKeyRequest(BaseModel):
    UserName: Optional[ExistingUserNameType] = None


class CreateAccessKeyResponse(BaseModel):
    AccessKey_1: AccessKey = Field(..., alias='AccessKey')


class CreateAccountAliasRequest(BaseModel):
    AccountAlias: AccountAliasType


class CreateGroupRequest(BaseModel):
    GroupName: GroupNameType
    Path: Optional[PathType] = None


class CreateLoginProfileRequest(BaseModel):
    Password: PasswordType
    PasswordResetRequired: Optional[BooleanType] = None
    UserName: UserNameType


class CreatePolicyVersionRequest(BaseModel):
    PolicyArn: ArnType
    PolicyDocument: PolicyDocumentType
    SetAsDefault: Optional[BooleanType] = None


class CreateServiceLinkedRoleRequest(BaseModel):
    AWSServiceName: GroupNameType
    CustomSuffix: Optional[CustomSuffixType] = None
    Description: Optional[RoleDescriptionType] = None


class CreateServiceSpecificCredentialRequest(BaseModel):
    ServiceName_1: ServiceName = Field(..., alias='ServiceName')
    UserName: UserNameType


class DeactivateMFADeviceRequest(BaseModel):
    SerialNumber: SerialNumberType
    UserName: ExistingUserNameType


class DeleteAccessKeyRequest(BaseModel):
    AccessKeyId: AccessKeyIdType
    UserName: Optional[ExistingUserNameType] = None


class DeleteAccountAliasRequest(BaseModel):
    AccountAlias: AccountAliasType


class DeleteGroupPolicyRequest(BaseModel):
    GroupName: GroupNameType
    PolicyName: PolicyNameType


class DeleteGroupRequest(BaseModel):
    GroupName: GroupNameType


class DeleteInstanceProfileRequest(BaseModel):
    InstanceProfileName: InstanceProfileNameType


class DeleteLoginProfileRequest(BaseModel):
    UserName: UserNameType


class DeleteOpenIDConnectProviderRequest(BaseModel):
    OpenIDConnectProviderArn: ArnType


class DeletePolicyRequest(BaseModel):
    PolicyArn: ArnType


class DeletePolicyVersionRequest(BaseModel):
    PolicyArn: ArnType
    VersionId: PolicyVersionIdType


class DeleteRolePermissionsBoundaryRequest(BaseModel):
    RoleName: RoleNameType


class DeleteRolePolicyRequest(BaseModel):
    PolicyName: PolicyNameType
    RoleName: RoleNameType


class DeleteRoleRequest(BaseModel):
    RoleName: RoleNameType


class DeleteSAMLProviderRequest(BaseModel):
    SAMLProviderArn: ArnType


class DeleteSSHPublicKeyRequest(BaseModel):
    SSHPublicKeyId: PublicKeyIdType
    UserName: UserNameType


class DeleteServerCertificateRequest(BaseModel):
    ServerCertificateName: ServerCertificateNameType


class DeleteServiceLinkedRoleRequest(BaseModel):
    RoleName: RoleNameType


class DeleteServiceLinkedRoleResponse(BaseModel):
    DeletionTaskId: DeletionTaskIdType


class DeleteServiceSpecificCredentialRequest(BaseModel):
    ServiceSpecificCredentialId_1: ServiceSpecificCredentialId = Field(
        ..., alias='ServiceSpecificCredentialId'
    )
    UserName: Optional[UserNameType] = None


class DeleteSigningCertificateRequest(BaseModel):
    CertificateId: CertificateIdType
    UserName: Optional[ExistingUserNameType] = None


class DeleteUserPermissionsBoundaryRequest(BaseModel):
    UserName: UserNameType


class DeleteUserPolicyRequest(BaseModel):
    PolicyName: PolicyNameType
    UserName: ExistingUserNameType


class DeleteUserRequest(BaseModel):
    UserName: ExistingUserNameType


class DeleteVirtualMFADeviceRequest(BaseModel):
    SerialNumber: SerialNumberType


class DetachGroupPolicyRequest(BaseModel):
    GroupName: GroupNameType
    PolicyArn: ArnType


class DetachRolePolicyRequest(BaseModel):
    PolicyArn: ArnType
    RoleName: RoleNameType


class DetachUserPolicyRequest(BaseModel):
    PolicyArn: ArnType
    UserName: UserNameType


class EnableMFADeviceRequest(BaseModel):
    AuthenticationCode1: AuthenticationCodeType
    AuthenticationCode2: AuthenticationCodeType
    SerialNumber: SerialNumberType
    UserName: ExistingUserNameType


class EntityInfo(BaseModel):
    Arn: ArnType
    Id: IdType
    Name: UserNameType
    Path: Optional[PathType] = None
    Type: PolicyOwnerEntityType


class ErrorDetails(BaseModel):
    Code: StringType
    Message: StringType


class EvalDecisionDetailsType(
    RootModel[Optional[Dict[str, PolicyEvaluationDecisionType]]]
):
    root: Optional[Dict[str, PolicyEvaluationDecisionType]] = None


class GenerateCredentialReportResponse(BaseModel):
    Description: Optional[ReportStateDescriptionType] = None
    State: Optional[ReportStateType] = None


class GenerateOrganizationsAccessReportRequest(BaseModel):
    EntityPath: OrganizationsEntityPathType
    OrganizationsPolicyId: Optional[OrganizationsPolicyIdType] = None


class GenerateOrganizationsAccessReportResponse(BaseModel):
    JobId: Optional[JobIDType] = None


class GenerateServiceLastAccessedDetailsRequest(BaseModel):
    Arn: ArnType
    Granularity: Optional[AccessAdvisorUsageGranularityType] = None


class GenerateServiceLastAccessedDetailsResponse(BaseModel):
    JobId: Optional[JobIDType] = None


class GetAccessKeyLastUsedRequest(BaseModel):
    AccessKeyId: AccessKeyIdType


class GetAccessKeyLastUsedResponse(BaseModel):
    AccessKeyLastUsed_1: Optional[AccessKeyLastUsed] = Field(
        None, alias='AccessKeyLastUsed'
    )
    UserName: Optional[ExistingUserNameType] = None


class GetAccountAuthorizationDetailsRequest(BaseModel):
    Filter: Optional[EntityListType] = None
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None


class GetCredentialReportResponse(BaseModel):
    Content: Optional[ReportContentType] = None
    GeneratedTime: Optional[DateType] = None
    ReportFormat: Optional[ReportFormatType] = None


class GetGroupPolicyRequest(BaseModel):
    GroupName: GroupNameType
    PolicyName: PolicyNameType


class GetGroupPolicyResponse(BaseModel):
    GroupName: GroupNameType
    PolicyDocument: PolicyDocumentType
    PolicyName: PolicyNameType


class GetGroupRequest(BaseModel):
    GroupName: GroupNameType
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None


class GetInstanceProfileRequest(BaseModel):
    InstanceProfileName: InstanceProfileNameType


class GetLoginProfileRequest(BaseModel):
    UserName: UserNameType


class GetOpenIDConnectProviderRequest(BaseModel):
    OpenIDConnectProviderArn: ArnType


class GetOrganizationsAccessReportRequest(BaseModel):
    JobId: JobIDType
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    SortKey: Optional[SortKeyType] = None


class GetOrganizationsAccessReportResponse(BaseModel):
    AccessDetails_1: Optional[AccessDetails] = Field(None, alias='AccessDetails')
    ErrorDetails_1: Optional[ErrorDetails] = Field(None, alias='ErrorDetails')
    IsTruncated: Optional[BooleanType] = None
    JobCompletionDate: Optional[DateType] = None
    JobCreationDate: DateType
    JobStatus: JobStatusType
    Marker: Optional[MarkerType] = None
    NumberOfServicesAccessible: Optional[IntegerType] = None
    NumberOfServicesNotAccessed: Optional[IntegerType] = None


class GetPolicyRequest(BaseModel):
    PolicyArn: ArnType


class GetPolicyVersionRequest(BaseModel):
    PolicyArn: ArnType
    VersionId: PolicyVersionIdType


class GetRolePolicyRequest(BaseModel):
    PolicyName: PolicyNameType
    RoleName: RoleNameType


class GetRolePolicyResponse(BaseModel):
    PolicyDocument: PolicyDocumentType
    PolicyName: PolicyNameType
    RoleName: RoleNameType


class GetRoleRequest(BaseModel):
    RoleName: RoleNameType


class GetSAMLProviderRequest(BaseModel):
    SAMLProviderArn: ArnType


class GetSSHPublicKeyRequest(BaseModel):
    Encoding: EncodingType
    SSHPublicKeyId: PublicKeyIdType
    UserName: UserNameType


class GetServerCertificateRequest(BaseModel):
    ServerCertificateName: ServerCertificateNameType


class GetServiceLastAccessedDetailsRequest(BaseModel):
    JobId: JobIDType
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None


class GetServiceLastAccessedDetailsWithEntitiesRequest(BaseModel):
    JobId: JobIDType
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    ServiceNamespace: ServiceNamespaceType


class GetUserPolicyRequest(BaseModel):
    PolicyName: PolicyNameType
    UserName: ExistingUserNameType


class GetUserPolicyResponse(BaseModel):
    PolicyDocument: PolicyDocumentType
    PolicyName: PolicyNameType
    UserName: ExistingUserNameType


class GetUserRequest(BaseModel):
    UserName: Optional[ExistingUserNameType] = None


class Group(BaseModel):
    Arn: ArnType
    CreateDate: DateType
    GroupId: IdType
    GroupName: GroupNameType
    Path: PathType


class ListAccessKeysRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    UserName: Optional[ExistingUserNameType] = None


class ListAccountAliasesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None


class ListAttachedGroupPoliciesRequest(BaseModel):
    GroupName: GroupNameType
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PolicyPathType] = None


class ListAttachedRolePoliciesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PolicyPathType] = None
    RoleName: RoleNameType


class ListAttachedUserPoliciesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PolicyPathType] = None
    UserName: UserNameType


class ListEntitiesForPolicyRequest(BaseModel):
    EntityFilter: Optional[EntityType] = None
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PathType] = None
    PolicyArn: ArnType
    PolicyUsageFilter: Optional[PolicyUsageType] = None


class ListGroupPoliciesRequest(BaseModel):
    GroupName: GroupNameType
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None


class ListGroupsForUserRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    UserName: ExistingUserNameType


class ListGroupsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PathPrefixType] = None


class ListInstanceProfileTagsRequest(BaseModel):
    InstanceProfileName: InstanceProfileNameType
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None


class ListInstanceProfilesForRoleRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    RoleName: RoleNameType


class ListInstanceProfilesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PathPrefixType] = None


class ListMFADeviceTagsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    SerialNumber: SerialNumberType


class ListMFADevicesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    UserName: Optional[ExistingUserNameType] = None


class ListOpenIDConnectProviderTagsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    OpenIDConnectProviderArn: ArnType


class ListPoliciesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    OnlyAttached: Optional[BooleanType] = None
    PathPrefix: Optional[PolicyPathType] = None
    PolicyUsageFilter: Optional[PolicyUsageType] = None
    Scope: Optional[PolicyScopeType] = None


class ListPolicyTagsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PolicyArn: ArnType


class ListPolicyVersionsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PolicyArn: ArnType


class ListRolePoliciesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    RoleName: RoleNameType


class ListRoleTagsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    RoleName: RoleNameType


class ListRolesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PathPrefixType] = None


class ListSAMLProviderTagsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    SAMLProviderArn: ArnType


class ListSSHPublicKeysRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    UserName: Optional[UserNameType] = None


class ListServerCertificateTagsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    ServerCertificateName: ServerCertificateNameType


class ListServerCertificatesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PathPrefixType] = None


class ListServiceSpecificCredentialsRequest(BaseModel):
    ServiceName_1: Optional[ServiceName] = Field(None, alias='ServiceName')
    UserName: Optional[UserNameType] = None


class ListSigningCertificatesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    UserName: Optional[ExistingUserNameType] = None


class ListUserPoliciesRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    UserName: ExistingUserNameType


class ListUserTagsRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    UserName: ExistingUserNameType


class ListUsersRequest(BaseModel):
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PathPrefix: Optional[PathPrefixType] = None


class ListVirtualMFADevicesRequest(BaseModel):
    AssignmentStatus: Optional[AssignmentStatusType] = None
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None


class LoginProfile(BaseModel):
    CreateDate: DateType
    PasswordResetRequired: Optional[BooleanType] = None
    UserName: UserNameType


class MFADevice(BaseModel):
    EnableDate: DateType
    SerialNumber: SerialNumberType
    UserName: UserNameType


class OpenIDConnectProviderListEntry(BaseModel):
    Arn: Optional[ArnType] = None


class OpenIDConnectProviderListType(RootModel[List[OpenIDConnectProviderListEntry]]):
    root: List[OpenIDConnectProviderListEntry] = Field(
        ..., description='Contains a list of IAM OpenID Connect providers.'
    )


class OrganizationsDecisionDetail(BaseModel):
    AllowedByOrganizations: Optional[BooleanType] = None


class PasswordPolicy(BaseModel):
    AllowUsersToChangePassword: Optional[BooleanType] = None
    ExpirePasswords: Optional[BooleanType] = None
    HardExpiry: Optional[BooleanObjectType] = None
    MaxPasswordAge: Optional[MaxPasswordAgeType] = None
    MinimumPasswordLength: Optional[MinimumPasswordLengthType] = None
    PasswordReusePrevention: Optional[PasswordReusePreventionType] = None
    RequireLowercaseCharacters: Optional[BooleanType] = None
    RequireNumbers: Optional[BooleanType] = None
    RequireSymbols: Optional[BooleanType] = None
    RequireUppercaseCharacters: Optional[BooleanType] = None


class PermissionsBoundaryDecisionDetail(BaseModel):
    AllowedByPermissionsBoundary: Optional[BooleanType] = None


class PolicyDetail(BaseModel):
    PolicyDocument: Optional[PolicyDocumentType] = None
    PolicyName: Optional[PolicyNameType] = None


class PolicyGrantingServiceAccess(BaseModel):
    EntityName: Optional[EntityNameType] = None
    EntityType: Optional[PolicyOwnerEntityType] = None
    PolicyArn: Optional[ArnType] = None
    PolicyName: PolicyNameType
    PolicyType_1: PolicyType = Field(..., alias='PolicyType')


class PolicyGroup(BaseModel):
    GroupId: Optional[IdType] = None
    GroupName: Optional[GroupNameType] = None


class PolicyGroupListType(RootModel[List[PolicyGroup]]):
    root: List[PolicyGroup]


class PolicyRole(BaseModel):
    RoleId: Optional[IdType] = None
    RoleName: Optional[RoleNameType] = None


class PolicyRoleListType(RootModel[List[PolicyRole]]):
    root: List[PolicyRole]


class PolicyUser(BaseModel):
    UserId: Optional[IdType] = None
    UserName: Optional[UserNameType] = None


class PolicyUserListType(RootModel[List[PolicyUser]]):
    root: List[PolicyUser]


class PolicyVersion(BaseModel):
    CreateDate: Optional[DateType] = None
    Document: Optional[PolicyDocumentType] = None
    IsDefaultVersion: Optional[BooleanType] = None
    VersionId: Optional[PolicyVersionIdType] = None


class PutGroupPolicyRequest(BaseModel):
    GroupName: GroupNameType
    PolicyDocument: PolicyDocumentType
    PolicyName: PolicyNameType


class PutRolePermissionsBoundaryRequest(BaseModel):
    PermissionsBoundary: ArnType
    RoleName: RoleNameType


class PutRolePolicyRequest(BaseModel):
    PolicyDocument: PolicyDocumentType
    PolicyName: PolicyNameType
    RoleName: RoleNameType


class PutUserPermissionsBoundaryRequest(BaseModel):
    PermissionsBoundary: ArnType
    UserName: UserNameType


class PutUserPolicyRequest(BaseModel):
    PolicyDocument: PolicyDocumentType
    PolicyName: PolicyNameType
    UserName: ExistingUserNameType


class RemoveClientIDFromOpenIDConnectProviderRequest(BaseModel):
    ClientID: ClientIDType
    OpenIDConnectProviderArn: ArnType


class RemoveRoleFromInstanceProfileRequest(BaseModel):
    InstanceProfileName: InstanceProfileNameType
    RoleName: RoleNameType


class RemoveUserFromGroupRequest(BaseModel):
    GroupName: GroupNameType
    UserName: ExistingUserNameType


class ResetServiceSpecificCredentialRequest(BaseModel):
    ServiceSpecificCredentialId_1: ServiceSpecificCredentialId = Field(
        ..., alias='ServiceSpecificCredentialId'
    )
    UserName: Optional[UserNameType] = None


class ResourceNameListType(RootModel[List[ResourceNameType]]):
    root: List[ResourceNameType]


class ResourceSpecificResult(BaseModel):
    EvalDecisionDetails: Optional[EvalDecisionDetailsType] = None
    EvalResourceDecision: PolicyEvaluationDecisionType
    EvalResourceName: ResourceNameType
    MatchedStatements: Optional[StatementListType] = None
    MissingContextValues: Optional[ContextKeyNamesResultListType] = None
    PermissionsBoundaryDecisionDetail_1: Optional[PermissionsBoundaryDecisionDetail] = (
        Field(None, alias='PermissionsBoundaryDecisionDetail')
    )


class ResourceSpecificResultListType(RootModel[List[ResourceSpecificResult]]):
    root: List[ResourceSpecificResult]


class ResyncMFADeviceRequest(BaseModel):
    AuthenticationCode1: AuthenticationCodeType
    AuthenticationCode2: AuthenticationCodeType
    SerialNumber: SerialNumberType
    UserName: ExistingUserNameType


class RoleLastUsed(BaseModel):
    LastUsedDate: Optional[DateType] = None
    Region: Optional[StringType] = None


class RoleUsageType(BaseModel):
    Region: Optional[RegionNameType] = None
    Resources: Optional[ArnListType] = None


class SAMLProviderListEntry(BaseModel):
    Arn: Optional[ArnType] = None
    CreateDate: Optional[DateType] = None
    ValidUntil: Optional[DateType] = None


class SAMLProviderListType(RootModel[List[SAMLProviderListEntry]]):
    root: List[SAMLProviderListEntry]


class SSHPublicKey(BaseModel):
    Fingerprint: PublicKeyFingerprintType
    SSHPublicKeyBody: PublicKeyMaterialType
    SSHPublicKeyId: PublicKeyIdType
    Status: StatusType
    UploadDate: Optional[DateType] = None
    UserName: UserNameType


class SSHPublicKeyMetadata(BaseModel):
    SSHPublicKeyId: PublicKeyIdType
    Status: StatusType
    UploadDate: DateType
    UserName: UserNameType


class ServerCertificateMetadata(BaseModel):
    Arn: ArnType
    Expiration: Optional[DateType] = None
    Path: PathType
    ServerCertificateId: IdType
    ServerCertificateName: ServerCertificateNameType
    UploadDate: Optional[DateType] = None


class ServiceSpecificCredential(BaseModel):
    CreateDate: DateType
    ServiceName_1: ServiceName = Field(..., alias='ServiceName')
    ServicePassword_1: ServicePassword = Field(..., alias='ServicePassword')
    ServiceSpecificCredentialId_1: ServiceSpecificCredentialId = Field(
        ..., alias='ServiceSpecificCredentialId'
    )
    ServiceUserName_1: ServiceUserName = Field(..., alias='ServiceUserName')
    Status: StatusType
    UserName: UserNameType


class ServiceSpecificCredentialMetadata(BaseModel):
    CreateDate: DateType
    ServiceName_1: ServiceName = Field(..., alias='ServiceName')
    ServiceSpecificCredentialId_1: ServiceSpecificCredentialId = Field(
        ..., alias='ServiceSpecificCredentialId'
    )
    ServiceUserName_1: ServiceUserName = Field(..., alias='ServiceUserName')
    Status: StatusType
    UserName: UserNameType


class ServiceSpecificCredentialsListType(
    RootModel[List[ServiceSpecificCredentialMetadata]]
):
    root: List[ServiceSpecificCredentialMetadata]


class SetDefaultPolicyVersionRequest(BaseModel):
    PolicyArn: ArnType
    VersionId: PolicyVersionIdType


class SetSecurityTokenServicePreferencesRequest(BaseModel):
    GlobalEndpointTokenVersion_1: GlobalEndpointTokenVersion = Field(
        ..., alias='GlobalEndpointTokenVersion'
    )


class SigningCertificate(BaseModel):
    CertificateBody: CertificateBodyType
    CertificateId: CertificateIdType
    Status: StatusType
    UploadDate: Optional[DateType] = None
    UserName: UserNameType


class SimulationPolicyListType(RootModel[List[PolicyDocumentType]]):
    root: List[PolicyDocumentType]


class Tag(BaseModel):
    Key: TagKeyType
    Value: TagValueType


class TrackedActionLastAccessed(BaseModel):
    ActionName: Optional[StringType] = None
    LastAccessedEntity: Optional[ArnType] = None
    LastAccessedRegion: Optional[StringType] = None
    LastAccessedTime: Optional[DateType] = None


class TrackedActionsLastAccessed(RootModel[List[TrackedActionLastAccessed]]):
    root: List[TrackedActionLastAccessed]


class UpdateAccessKeyRequest(BaseModel):
    AccessKeyId: AccessKeyIdType
    Status: StatusType
    UserName: Optional[ExistingUserNameType] = None


class UpdateAccountPasswordPolicyRequest(BaseModel):
    AllowUsersToChangePassword: Optional[BooleanType] = None
    HardExpiry: Optional[BooleanObjectType] = None
    MaxPasswordAge: Optional[MaxPasswordAgeType] = None
    MinimumPasswordLength: Optional[MinimumPasswordLengthType] = None
    PasswordReusePrevention: Optional[PasswordReusePreventionType] = None
    RequireLowercaseCharacters: Optional[BooleanType] = None
    RequireNumbers: Optional[BooleanType] = None
    RequireSymbols: Optional[BooleanType] = None
    RequireUppercaseCharacters: Optional[BooleanType] = None


class UpdateAssumeRolePolicyRequest(BaseModel):
    PolicyDocument: PolicyDocumentType
    RoleName: RoleNameType


class UpdateGroupRequest(BaseModel):
    GroupName: GroupNameType
    NewGroupName: Optional[GroupNameType] = None
    NewPath: Optional[PathType] = None


class UpdateLoginProfileRequest(BaseModel):
    Password: Optional[PasswordType] = None
    PasswordResetRequired: Optional[BooleanObjectType] = None
    UserName: UserNameType


class UpdateRoleDescriptionRequest(BaseModel):
    Description: RoleDescriptionType
    RoleName: RoleNameType


class UpdateRoleRequest(BaseModel):
    Description: Optional[RoleDescriptionType] = None
    MaxSessionDuration: Optional[RoleMaxSessionDurationType] = None
    RoleName: RoleNameType


class UpdateSAMLProviderRequest(BaseModel):
    SAMLMetadataDocument: SAMLMetadataDocumentType
    SAMLProviderArn: ArnType


class UpdateSAMLProviderResponse(BaseModel):
    SAMLProviderArn: Optional[ArnType] = None


class UpdateSSHPublicKeyRequest(BaseModel):
    SSHPublicKeyId: PublicKeyIdType
    Status: StatusType
    UserName: UserNameType


class UpdateServerCertificateRequest(BaseModel):
    NewPath: Optional[PathType] = None
    NewServerCertificateName: Optional[ServerCertificateNameType] = None
    ServerCertificateName: ServerCertificateNameType


class UpdateServiceSpecificCredentialRequest(BaseModel):
    ServiceSpecificCredentialId_1: ServiceSpecificCredentialId = Field(
        ..., alias='ServiceSpecificCredentialId'
    )
    Status: StatusType
    UserName: Optional[UserNameType] = None


class UpdateSigningCertificateRequest(BaseModel):
    CertificateId: CertificateIdType
    Status: StatusType
    UserName: Optional[ExistingUserNameType] = None


class UpdateUserRequest(BaseModel):
    NewPath: Optional[PathType] = None
    NewUserName: Optional[UserNameType] = None
    UserName: ExistingUserNameType


class UploadSSHPublicKeyRequest(BaseModel):
    SSHPublicKeyBody: PublicKeyMaterialType
    UserName: UserNameType


class UploadSSHPublicKeyResponse(BaseModel):
    SSHPublicKey_1: Optional[SSHPublicKey] = Field(None, alias='SSHPublicKey')


class UploadSigningCertificateRequest(BaseModel):
    CertificateBody: CertificateBodyType
    UserName: Optional[ExistingUserNameType] = None


class UploadSigningCertificateResponse(BaseModel):
    Certificate: SigningCertificate


class AccessKeyMetadataListType(RootModel[List[AccessKeyMetadata]]):
    root: List[AccessKeyMetadata] = Field(
        ...,
        description='<p>Contains a list of access key metadata.</p> <p>This data type is used as a response element in the <a>ListAccessKeys</a> operation.</p>',
    )


class AccountAliasListType(RootModel[List[AccountAliasType]]):
    root: List[AccountAliasType]


class AttachedPoliciesListType(RootModel[List[AttachedPolicy]]):
    root: List[AttachedPolicy]


class CertificateListType(RootModel[List[SigningCertificate]]):
    root: List[SigningCertificate] = Field(
        ...,
        description='<p>Contains a list of signing certificates.</p> <p>This data type is used as a response element in the <a>ListSigningCertificates</a> operation.</p>',
    )


class ClientIDListType(RootModel[List[ClientIDType]]):
    root: List[ClientIDType]


class GroupListType(RootModel[List[Group]]):
    root: List[Group] = Field(
        ...,
        description='<p>Contains a list of IAM groups.</p> <p>This data type is used as a response element in the <a>ListGroups</a> operation.</p>',
    )


class GroupNameListType(RootModel[List[GroupNameType]]):
    root: List[GroupNameType]


class MfaDeviceListType(RootModel[List[MFADevice]]):
    root: List[MFADevice] = Field(
        ...,
        description='<p>Contains a list of MFA devices.</p> <p>This data type is used as a response element in the <a>ListMFADevices</a> and <a>ListVirtualMFADevices</a> operations. </p>',
    )


class PolicyDetailListType(RootModel[List[PolicyDetail]]):
    root: List[PolicyDetail]


class PolicyDocumentVersionListType(RootModel[List[PolicyVersion]]):
    root: List[PolicyVersion]


class PolicyGrantingServiceAccessListType(RootModel[List[PolicyGrantingServiceAccess]]):
    root: List[PolicyGrantingServiceAccess]


class PolicyNameListType(RootModel[List[PolicyNameType]]):
    root: List[PolicyNameType] = Field(
        ...,
        description='<p>Contains a list of policy names.</p> <p>This data type is used as a response element in the <a>ListPolicies</a> operation.</p>',
    )


class ServerCertificateMetadataListType(RootModel[List[ServerCertificateMetadata]]):
    root: List[ServerCertificateMetadata]


class ServiceNamespaceListType(RootModel[List[ServiceNamespaceType]]):
    root: List[ServiceNamespaceType] = Field(..., max_length=200, min_length=1)


class SummaryMapType(RootModel[Optional[Dict[str, SummaryValueType]]]):
    root: Optional[Dict[str, SummaryValueType]] = None


class TagKeyListType(RootModel[List[TagKeyType]]):
    root: List[TagKeyType] = Field(..., max_length=50)


class TagListType(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50)


class ThumbprintListType(RootModel[List[ThumbprintType]]):
    root: List[ThumbprintType] = Field(
        ...,
        description='Contains a list of thumbprints of identity provider server certificates.',
    )


class Tags(RootModel[List[Tag]]):
    root: List[Tag] = Field(..., max_length=50)


class ContextEntry(BaseModel):
    ContextKeyName: Optional[ContextKeyNameType] = None
    ContextKeyType: Optional[ContextKeyTypeEnum] = None
    ContextKeyValues: Optional[ContextKeyValueListType] = None


class ContextEntryListType(RootModel[List[ContextEntry]]):
    root: List[ContextEntry]


class CreateGroupResponse(BaseModel):
    Group_1: Group = Field(..., alias='Group')


class CreateInstanceProfileRequest(BaseModel):
    InstanceProfileName: InstanceProfileNameType
    Path: Optional[PathType] = None
    Tags: Optional[TagListType] = None


class CreateLoginProfileResponse(BaseModel):
    LoginProfile_1: LoginProfile = Field(..., alias='LoginProfile')


class CreateOpenIDConnectProviderRequest(BaseModel):
    ClientIDList: Optional[ClientIDListType] = None
    Tags: Optional[TagListType] = None
    ThumbprintList: ThumbprintListType
    Url: OpenIDConnectProviderUrlType


class CreateOpenIDConnectProviderResponse(BaseModel):
    OpenIDConnectProviderArn: Optional[ArnType] = None
    Tags: Optional[TagListType] = None


class CreatePolicyRequest(BaseModel):
    Description: Optional[PolicyDescriptionType] = None
    Path: Optional[PolicyPathType] = None
    PolicyDocument: PolicyDocumentType
    PolicyName: PolicyNameType
    Tags: Optional[TagListType] = None


class CreatePolicyVersionResponse(BaseModel):
    PolicyVersion_1: Optional[PolicyVersion] = Field(None, alias='PolicyVersion')


class CreateRoleRequest(BaseModel):
    AssumeRolePolicyDocument: PolicyDocumentType
    Description: Optional[RoleDescriptionType] = None
    MaxSessionDuration: Optional[RoleMaxSessionDurationType] = None
    Path: Optional[PathType] = None
    PermissionsBoundary: Optional[ArnType] = None
    RoleName: RoleNameType
    Tags: Optional[TagListType] = None


class CreateSAMLProviderRequest(BaseModel):
    Name: SAMLProviderNameType
    SAMLMetadataDocument: SAMLMetadataDocumentType
    Tags: Optional[TagListType] = None


class CreateSAMLProviderResponse(BaseModel):
    SAMLProviderArn: Optional[ArnType] = None
    Tags: Optional[TagListType] = None


class CreateServiceSpecificCredentialResponse(BaseModel):
    ServiceSpecificCredential_1: Optional[ServiceSpecificCredential] = Field(
        None, alias='ServiceSpecificCredential'
    )


class CreateUserRequest(BaseModel):
    Path: Optional[PathType] = None
    PermissionsBoundary: Optional[ArnType] = None
    Tags: Optional[TagListType] = None
    UserName: UserNameType


class CreateVirtualMFADeviceRequest(BaseModel):
    Path: Optional[PathType] = None
    Tags: Optional[TagListType] = None
    VirtualMFADeviceName_1: VirtualMFADeviceName = Field(
        ..., alias='VirtualMFADeviceName'
    )


class EntityDetails(BaseModel):
    EntityInfo_1: EntityInfo = Field(..., alias='EntityInfo')
    LastAuthenticated: Optional[DateType] = None


class EvaluationResult(BaseModel):
    EvalActionName: ActionNameType
    EvalDecision: PolicyEvaluationDecisionType
    EvalDecisionDetails: Optional[EvalDecisionDetailsType] = None
    EvalResourceName: Optional[ResourceNameType] = None
    MatchedStatements: Optional[StatementListType] = None
    MissingContextValues: Optional[ContextKeyNamesResultListType] = None
    OrganizationsDecisionDetail_1: Optional[OrganizationsDecisionDetail] = Field(
        None, alias='OrganizationsDecisionDetail'
    )
    PermissionsBoundaryDecisionDetail_1: Optional[PermissionsBoundaryDecisionDetail] = (
        Field(None, alias='PermissionsBoundaryDecisionDetail')
    )
    ResourceSpecificResults: Optional[ResourceSpecificResultListType] = None


class EvaluationResultsListType(RootModel[List[EvaluationResult]]):
    root: List[EvaluationResult]


class GetAccountPasswordPolicyResponse(BaseModel):
    PasswordPolicy_1: PasswordPolicy = Field(..., alias='PasswordPolicy')


class GetAccountSummaryResponse(BaseModel):
    SummaryMap: Optional[SummaryMapType] = None


class GetContextKeysForCustomPolicyRequest(BaseModel):
    PolicyInputList: SimulationPolicyListType


class GetContextKeysForPrincipalPolicyRequest(BaseModel):
    PolicyInputList: Optional[SimulationPolicyListType] = None
    PolicySourceArn: ArnType


class GetLoginProfileResponse(BaseModel):
    LoginProfile_1: LoginProfile = Field(..., alias='LoginProfile')


class GetOpenIDConnectProviderResponse(BaseModel):
    ClientIDList: Optional[ClientIDListType] = None
    CreateDate: Optional[DateType] = None
    Tags: Optional[TagListType] = None
    ThumbprintList: Optional[ThumbprintListType] = None
    Url: Optional[OpenIDConnectProviderUrlType] = None


class GetPolicyVersionResponse(BaseModel):
    PolicyVersion_1: Optional[PolicyVersion] = Field(None, alias='PolicyVersion')


class GetSAMLProviderResponse(BaseModel):
    CreateDate: Optional[DateType] = None
    SAMLMetadataDocument: Optional[SAMLMetadataDocumentType] = None
    Tags: Optional[TagListType] = None
    ValidUntil: Optional[DateType] = None


class GetSSHPublicKeyResponse(BaseModel):
    SSHPublicKey_1: Optional[SSHPublicKey] = Field(None, alias='SSHPublicKey')


class GroupDetail(BaseModel):
    Arn: Optional[ArnType] = None
    AttachedManagedPolicies: Optional[AttachedPoliciesListType] = None
    CreateDate: Optional[DateType] = None
    GroupId: Optional[IdType] = None
    GroupName: Optional[GroupNameType] = None
    GroupPolicyList: Optional[PolicyDetailListType] = None
    Path: Optional[PathType] = None


class ListAccessKeysResponse(BaseModel):
    AccessKeyMetadata: AccessKeyMetadataListType
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListAccountAliasesResponse(BaseModel):
    AccountAliases: AccountAliasListType
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListAttachedGroupPoliciesResponse(BaseModel):
    AttachedPolicies: Optional[AttachedPoliciesListType] = None
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListAttachedRolePoliciesResponse(BaseModel):
    AttachedPolicies: Optional[AttachedPoliciesListType] = None
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListAttachedUserPoliciesResponse(BaseModel):
    AttachedPolicies: Optional[AttachedPoliciesListType] = None
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListEntitiesForPolicyResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    PolicyGroups: Optional[PolicyGroupListType] = None
    PolicyRoles: Optional[PolicyRoleListType] = None
    PolicyUsers: Optional[PolicyUserListType] = None


class ListGroupPoliciesResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    PolicyNames: PolicyNameListType


class ListGroupsForUserResponse(BaseModel):
    Groups: GroupListType
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListGroupsResponse(BaseModel):
    Groups: GroupListType
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListInstanceProfileTagsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Tags: TagListType


class ListMFADeviceTagsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Tags: TagListType


class ListMFADevicesResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    MFADevices: MfaDeviceListType
    Marker: Optional[ResponseMarkerType] = None


class ListOpenIDConnectProviderTagsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Tags: TagListType


class ListOpenIDConnectProvidersResponse(BaseModel):
    OpenIDConnectProviderList: Optional[OpenIDConnectProviderListType] = None


class ListPoliciesGrantingServiceAccessEntry(BaseModel):
    Policies: Optional[PolicyGrantingServiceAccessListType] = None
    ServiceNamespace: Optional[ServiceNamespaceType] = None


class ListPoliciesGrantingServiceAccessRequest(BaseModel):
    Arn: ArnType
    Marker: Optional[MarkerType] = None
    ServiceNamespaces: ServiceNamespaceListType


class ListPolicyTagsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Tags: TagListType


class ListPolicyVersionsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Versions: Optional[PolicyDocumentVersionListType] = None


class ListRolePoliciesResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    PolicyNames: PolicyNameListType


class ListRoleTagsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Tags: TagListType


class ListSAMLProviderTagsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Tags: TagListType


class ListSAMLProvidersResponse(BaseModel):
    SAMLProviderList: Optional[SAMLProviderListType] = None


class ListServerCertificateTagsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Tags: TagListType


class ListServerCertificatesResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    ServerCertificateMetadataList: ServerCertificateMetadataListType


class ListServiceSpecificCredentialsResponse(BaseModel):
    ServiceSpecificCredentials: Optional[ServiceSpecificCredentialsListType] = None


class ListSigningCertificatesResponse(BaseModel):
    Certificates: CertificateListType
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListUserPoliciesResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    PolicyNames: PolicyNameListType


class ListUserTagsResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Tags: TagListType


class ManagedPolicyDetail(BaseModel):
    Arn: Optional[ArnType] = None
    AttachmentCount: Optional[AttachmentCountType] = None
    CreateDate: Optional[DateType] = None
    DefaultVersionId: Optional[PolicyVersionIdType] = None
    Description: Optional[PolicyDescriptionType] = None
    IsAttachable: Optional[BooleanType] = None
    Path: Optional[PolicyPathType] = None
    PermissionsBoundaryUsageCount: Optional[AttachmentCountType] = None
    PolicyId: Optional[IdType] = None
    PolicyName: Optional[PolicyNameType] = None
    PolicyVersionList: Optional[PolicyDocumentVersionListType] = None
    UpdateDate: Optional[DateType] = None


class ManagedPolicyDetailListType(RootModel[List[ManagedPolicyDetail]]):
    root: List[ManagedPolicyDetail]


class Policy(BaseModel):
    Arn: Optional[ArnType] = None
    AttachmentCount: Optional[AttachmentCountType] = None
    CreateDate: Optional[DateType] = None
    DefaultVersionId: Optional[PolicyVersionIdType] = None
    Description: Optional[PolicyDescriptionType] = None
    IsAttachable: Optional[BooleanType] = None
    Path: Optional[PolicyPathType] = None
    PermissionsBoundaryUsageCount: Optional[AttachmentCountType] = None
    PolicyId: Optional[IdType] = None
    PolicyName: Optional[PolicyNameType] = None
    Tags: Optional[TagListType] = None
    UpdateDate: Optional[DateType] = None


class ResetServiceSpecificCredentialResponse(BaseModel):
    ServiceSpecificCredential_1: Optional[ServiceSpecificCredential] = Field(
        None, alias='ServiceSpecificCredential'
    )


class Role(BaseModel):
    Arn: ArnType
    AssumeRolePolicyDocument: Optional[PolicyDocumentType] = None
    CreateDate: DateType
    Description: Optional[RoleDescriptionType] = None
    MaxSessionDuration: Optional[RoleMaxSessionDurationType] = None
    Path: PathType
    PermissionsBoundary: Optional[AttachedPermissionsBoundary] = None
    RoleId: IdType
    RoleLastUsed_1: Optional[RoleLastUsed] = Field(None, alias='RoleLastUsed')
    RoleName: RoleNameType
    Tags: Optional[TagListType] = None


class RoleUsageListType(RootModel[List[RoleUsageType]]):
    root: List[RoleUsageType]


class SSHPublicKeyListType(RootModel[List[SSHPublicKeyMetadata]]):
    root: List[SSHPublicKeyMetadata]


class ServerCertificate(BaseModel):
    CertificateBody: CertificateBodyType
    CertificateChain: Optional[CertificateChainType] = None
    ServerCertificateMetadata_1: ServerCertificateMetadata = Field(
        ..., alias='ServerCertificateMetadata'
    )
    Tags: Optional[TagListType] = None


class ServiceLastAccessed(BaseModel):
    LastAuthenticated: Optional[DateType] = None
    LastAuthenticatedEntity: Optional[ArnType] = None
    LastAuthenticatedRegion: Optional[StringType] = None
    ServiceName: ServiceNameType
    ServiceNamespace: ServiceNamespaceType
    TotalAuthenticatedEntities: Optional[IntegerType] = None
    TrackedActionsLastAccessed_1: Optional[TrackedActionsLastAccessed] = Field(
        None, alias='TrackedActionsLastAccessed'
    )


class ServicesLastAccessed(RootModel[List[ServiceLastAccessed]]):
    root: List[ServiceLastAccessed]


class SimulateCustomPolicyRequest(BaseModel):
    ActionNames: ActionNameListType
    CallerArn: Optional[ResourceNameType] = None
    ContextEntries: Optional[ContextEntryListType] = None
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PermissionsBoundaryPolicyInputList: Optional[SimulationPolicyListType] = None
    PolicyInputList: SimulationPolicyListType
    ResourceArns: Optional[ResourceNameListType] = None
    ResourceHandlingOption: Optional[ResourceHandlingOptionType] = None
    ResourceOwner: Optional[ResourceNameType] = None
    ResourcePolicy: Optional[PolicyDocumentType] = None


class SimulatePolicyResponse(BaseModel):
    EvaluationResults: Optional[EvaluationResultsListType] = None
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class SimulatePrincipalPolicyRequest(BaseModel):
    ActionNames: ActionNameListType
    CallerArn: Optional[ResourceNameType] = None
    ContextEntries: Optional[ContextEntryListType] = None
    Marker: Optional[MarkerType] = None
    MaxItems: Optional[MaxItemsType] = None
    PermissionsBoundaryPolicyInputList: Optional[SimulationPolicyListType] = None
    PolicyInputList: Optional[SimulationPolicyListType] = None
    PolicySourceArn: ArnType
    ResourceArns: Optional[ResourceNameListType] = None
    ResourceHandlingOption: Optional[ResourceHandlingOptionType] = None
    ResourceOwner: Optional[ResourceNameType] = None
    ResourcePolicy: Optional[PolicyDocumentType] = None


class TagInstanceProfileRequest(BaseModel):
    InstanceProfileName: InstanceProfileNameType
    Tags: TagListType


class TagMFADeviceRequest(BaseModel):
    SerialNumber: SerialNumberType
    Tags: TagListType


class TagOpenIDConnectProviderRequest(BaseModel):
    OpenIDConnectProviderArn: ArnType
    Tags: TagListType


class TagPolicyRequest(BaseModel):
    PolicyArn: ArnType
    Tags: TagListType


class TagRoleRequest(BaseModel):
    RoleName: RoleNameType
    Tags: TagListType


class TagSAMLProviderRequest(BaseModel):
    SAMLProviderArn: ArnType
    Tags: TagListType


class TagServerCertificateRequest(BaseModel):
    ServerCertificateName: ServerCertificateNameType
    Tags: TagListType


class TagUserRequest(BaseModel):
    Tags: TagListType
    UserName: ExistingUserNameType


class UntagInstanceProfileRequest(BaseModel):
    InstanceProfileName: InstanceProfileNameType
    TagKeys: TagKeyListType


class UntagMFADeviceRequest(BaseModel):
    SerialNumber: SerialNumberType
    TagKeys: TagKeyListType


class UntagOpenIDConnectProviderRequest(BaseModel):
    OpenIDConnectProviderArn: ArnType
    TagKeys: TagKeyListType


class UntagPolicyRequest(BaseModel):
    PolicyArn: ArnType
    TagKeys: TagKeyListType


class UntagRoleRequest(BaseModel):
    RoleName: RoleNameType
    TagKeys: TagKeyListType


class UntagSAMLProviderRequest(BaseModel):
    SAMLProviderArn: ArnType
    TagKeys: TagKeyListType


class UntagServerCertificateRequest(BaseModel):
    ServerCertificateName: ServerCertificateNameType
    TagKeys: TagKeyListType


class UntagUserRequest(BaseModel):
    TagKeys: TagKeyListType
    UserName: ExistingUserNameType


class UpdateOpenIDConnectProviderThumbprintRequest(BaseModel):
    OpenIDConnectProviderArn: ArnType
    ThumbprintList: ThumbprintListType


class UpdateRoleDescriptionResponse(BaseModel):
    Role_1: Optional[Role] = Field(None, alias='Role')


class UploadServerCertificateRequest(BaseModel):
    CertificateBody: CertificateBodyType
    CertificateChain: Optional[CertificateChainType] = None
    Path: Optional[PathType] = None
    PrivateKey: PrivateKeyType
    ServerCertificateName: ServerCertificateNameType
    Tags: Optional[TagListType] = None


class UploadServerCertificateResponse(BaseModel):
    ServerCertificateMetadata_1: Optional[ServerCertificateMetadata] = Field(
        None, alias='ServerCertificateMetadata'
    )
    Tags: Optional[TagListType] = None


class User(BaseModel):
    Arn: ArnType
    CreateDate: DateType
    PasswordLastUsed: Optional[DateType] = None
    Path: PathType
    PermissionsBoundary: Optional[AttachedPermissionsBoundary] = None
    Tags: Optional[TagListType] = None
    UserId: IdType
    UserName: UserNameType


class UserDetail(BaseModel):
    Arn: Optional[ArnType] = None
    AttachedManagedPolicies: Optional[AttachedPoliciesListType] = None
    CreateDate: Optional[DateType] = None
    GroupList: Optional[GroupNameListType] = None
    Path: Optional[PathType] = None
    PermissionsBoundary: Optional[AttachedPermissionsBoundary] = None
    Tags: Optional[TagListType] = None
    UserId: Optional[IdType] = None
    UserName: Optional[UserNameType] = None
    UserPolicyList: Optional[PolicyDetailListType] = None


class VirtualMFADevice(BaseModel):
    Base32StringSeed: Optional[BootstrapDatum] = None
    EnableDate: Optional[DateType] = None
    QRCodePNG: Optional[BootstrapDatum] = None
    SerialNumber: SerialNumberType
    Tags: Optional[TagListType] = None
    User_1: Optional[User] = Field(None, alias='User')


class EntityDetailsListType(RootModel[List[EntityDetails]]):
    root: List[EntityDetails]


class GroupDetailListType(RootModel[List[GroupDetail]]):
    root: List[GroupDetail]


class ListPolicyGrantingServiceAccessResponseListType(
    RootModel[List[ListPoliciesGrantingServiceAccessEntry]]
):
    root: List[ListPoliciesGrantingServiceAccessEntry]


class PolicyListType(RootModel[List[Policy]]):
    root: List[Policy]


class RoleListType(RootModel[List[Role]]):
    root: List[Role] = Field(
        ...,
        description='<p>Contains a list of IAM roles.</p> <p>This data type is used as a response element in the <a>ListRoles</a> operation.</p>',
    )


class UserDetailListType(RootModel[List[UserDetail]]):
    root: List[UserDetail]


class UserListType(RootModel[List[User]]):
    root: List[User] = Field(
        ...,
        description='<p>Contains a list of users.</p> <p>This data type is used as a response element in the <a>GetGroup</a> and <a>ListUsers</a> operations. </p>',
    )


class VirtualMFADeviceListType(RootModel[List[VirtualMFADevice]]):
    root: List[VirtualMFADevice]


class ContextEntries(RootModel[List[ContextEntry]]):
    root: List[ContextEntry]


class CreatePolicyResponse(BaseModel):
    Policy_1: Optional[Policy] = Field(None, alias='Policy')


class CreateRoleResponse(BaseModel):
    Role_1: Role = Field(..., alias='Role')


class CreateServiceLinkedRoleResponse(BaseModel):
    Role_1: Optional[Role] = Field(None, alias='Role')


class CreateUserResponse(BaseModel):
    User_1: Optional[User] = Field(None, alias='User')


class CreateVirtualMFADeviceResponse(BaseModel):
    VirtualMFADevice_1: VirtualMFADevice = Field(..., alias='VirtualMFADevice')


class DeletionTaskFailureReasonType(BaseModel):
    Reason: Optional[ReasonType] = None
    RoleUsageList: Optional[RoleUsageListType] = None


class GetGroupResponse(BaseModel):
    Group_1: Group = Field(..., alias='Group')
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Users: UserListType


class GetPolicyResponse(BaseModel):
    Policy_1: Optional[Policy] = Field(None, alias='Policy')


class GetRoleResponse(BaseModel):
    Role_1: Role = Field(..., alias='Role')


class GetServerCertificateResponse(BaseModel):
    ServerCertificate_1: ServerCertificate = Field(..., alias='ServerCertificate')


class GetServiceLastAccessedDetailsResponse(BaseModel):
    Error: Optional[ErrorDetails] = None
    IsTruncated: Optional[BooleanType] = None
    JobCompletionDate: DateType
    JobCreationDate: DateType
    JobStatus: JobStatusType
    JobType: Optional[AccessAdvisorUsageGranularityType] = None
    Marker: Optional[ResponseMarkerType] = None
    ServicesLastAccessed_1: ServicesLastAccessed = Field(
        ..., alias='ServicesLastAccessed'
    )


class GetServiceLastAccessedDetailsWithEntitiesResponse(BaseModel):
    EntityDetailsList: EntityDetailsListType
    Error: Optional[ErrorDetails] = None
    IsTruncated: Optional[BooleanType] = None
    JobCompletionDate: DateType
    JobCreationDate: DateType
    JobStatus: JobStatusType
    Marker: Optional[ResponseMarkerType] = None


class GetServiceLinkedRoleDeletionStatusResponse(BaseModel):
    Reason: Optional[DeletionTaskFailureReasonType] = None
    Status: DeletionTaskStatusType


class GetUserResponse(BaseModel):
    User_1: User = Field(..., alias='User')


class InstanceProfile(BaseModel):
    Arn: ArnType
    CreateDate: DateType
    InstanceProfileId: IdType
    InstanceProfileName: InstanceProfileNameType
    Path: PathType
    Roles: RoleListType
    Tags: Optional[TagListType] = None


class ListPoliciesGrantingServiceAccessResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    PoliciesGrantingServiceAccess: ListPolicyGrantingServiceAccessResponseListType


class ListPoliciesResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Policies: Optional[PolicyListType] = None


class ListRolesResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Roles: RoleListType


class ListSSHPublicKeysResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    SSHPublicKeys: Optional[SSHPublicKeyListType] = None


class ListUsersResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Users: UserListType


class ListVirtualMFADevicesResponse(BaseModel):
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    VirtualMFADevices: VirtualMFADeviceListType


class InstanceProfileListType(RootModel[List[InstanceProfile]]):
    root: List[InstanceProfile] = Field(
        ..., description='Contains a list of instance profiles.'
    )


class CreateInstanceProfileResponse(BaseModel):
    InstanceProfile_1: InstanceProfile = Field(..., alias='InstanceProfile')


class GetInstanceProfileResponse(BaseModel):
    InstanceProfile_1: InstanceProfile = Field(..., alias='InstanceProfile')


class ListInstanceProfilesForRoleResponse(BaseModel):
    InstanceProfiles: InstanceProfileListType
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class ListInstanceProfilesResponse(BaseModel):
    InstanceProfiles: InstanceProfileListType
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None


class RoleDetail(BaseModel):
    Arn: Optional[ArnType] = None
    AssumeRolePolicyDocument: Optional[PolicyDocumentType] = None
    AttachedManagedPolicies: Optional[AttachedPoliciesListType] = None
    CreateDate: Optional[DateType] = None
    InstanceProfileList: Optional[InstanceProfileListType] = None
    Path: Optional[PathType] = None
    PermissionsBoundary: Optional[AttachedPermissionsBoundary] = None
    RoleId: Optional[IdType] = None
    RoleLastUsed_1: Optional[RoleLastUsed] = Field(None, alias='RoleLastUsed')
    RoleName: Optional[RoleNameType] = None
    RolePolicyList: Optional[PolicyDetailListType] = None
    Tags: Optional[TagListType] = None


class RoleDetailListType(RootModel[List[RoleDetail]]):
    root: List[RoleDetail]


class GetAccountAuthorizationDetailsResponse(BaseModel):
    GroupDetailList: Optional[GroupDetailListType] = None
    IsTruncated: Optional[BooleanType] = None
    Marker: Optional[ResponseMarkerType] = None
    Policies: Optional[ManagedPolicyDetailListType] = None
    RoleDetailList: Optional[RoleDetailListType] = None
    UserDetailList: Optional[UserDetailListType] = None
